---
author: [Pallas-Athena Cain, Hemani Alaparthi, Gregory M. Kapfhammer]
title: Introduction to Software Testing
date: '2023-9-16'
date-format: long
categories: [post, software engineering, fuzzing book]
description: <em>What is fuzzing and software testing?</em>
toc: true
page-layout: full
---

## Overview

### What is software testing?
Software testing is the process of evaluating and verifying that a software application or system meets specified requirements. It involves executing code in a controlled environment to check for errors, gaps, or missing requirements. So, why is it important?

* Helps identify bugs, errors, or issues in the software before it is released to users. 
* Ensures that the program behaves as expected.
* Provides feedback that helps developers improve the software iteratively, making it better with every update.

### Simple Testing in Python

To perform effective testing in Python, you need to understand three fundamental things:

* Python uses indentation for defining code blocks.
* Python is dynamically typed, meaning variables do not have fixed types.
* Python borrows syntax from other common languages, making it easier to grasp for those familiar with programming.

### Automating Tests

Automated tests can check if results are as expected using assertions. For example, assert statements take a condition and raise an exception if the condition is false This helps automate the validation process and identify issues early on. A few examples for effective automating tests include:

* Use assertions to automatically check if results are as expected.
* Handle floating-point precision issues with a small epsilon value.
* Write reusable test functions to simplify and streamline testing.

### Limitations of testing

Testing, no matter how thorough, can't guarantee that the software is 100% free of errors. It can, however, significantly reduce the likelihood of issues by catching them early in the development process. Testing provides confidence that the program works as intended but does not promise a perfect program.

## Summary


## Quiz Time 

### 1. Which of these is the proper way to test code?

**Bonus points** How many things can you list to improve in both test cases?

```python 
# OPTION A 

def test_the_function(
    testing_dir,
):
    generate_config(["writing"], str(testing_dir))
    gatorgrade_yml = testing_dir / "gatorgrade.yml"
    if "src/test.py" not ingatorgrade_yml.open().read():
        print("Yay it worked!")
    else: 
        print("sad days")
    if "writing/reflection.md" in gatorgrade_yml.open().read():
        print("(◠‿◠)")

```

```python
# OPTION B

def test_generate_config_creates_gatorgrade_yml_without_dir_not_in_user_input(
    testing_dir,
):
    """Test to see if input does not match directory"""
    # When generate_config is called
    generate_config(["writing"], str(testing_dir))
    # Then gatorgrade.yml is created
    gatorgrade_yml = testing_dir / "gatorgrade.yml"
    assert "src/test.py" not in gatorgrade_yml.open().read()
    assert "writing/reflection.md" in gatorgrade_yml.open().read()

```

<details>
<summary>Click to Expand for the Answer</summary>

**Answer: B!**  
The second test case is better than the first one because it is a lot more descriptive and automatically passes or fails through the use of `assert` statements. There are things to be improved in both cases but in general the more understandable the test case the better. It is important that future contributors know what the test cases are actually doing through comments and docstrings. Assert statements are also important for automatic testing so that the checks do not need to be done manually.

The correct code is from [Gatorgrade](https://github.com/GatorEducator/gatorgrade)! So exciting!

</details>


## Reflection

One key takeaway is how testing not only helps catch bugs but also provides a structured way to think about code quality and reliability. As we move forward in our software engineering journeys, the importance of integrating testing into our workflow early and often is clear.


## Action Items


<!-- Include the license statement for the online book -->
{{< include /_fuzzingbook-reference.qmd >}}

<!-- Include reference back to the listing of blog posts -->
{{< include /_back-blog.qmd >}}