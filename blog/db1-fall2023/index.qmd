---
author: [Jason Gyamfi, Sabrina Rodriguez, Keller Liptrap, Gregory M. Kapfhammer]
title: Program Debugging
date: '2023-11-29'
date-format: long
categories: [post, professional development, software engineering]
description: <em>How can we apply systematic debugging practices?</em>
toc: true
page-layout: full
---

## Overview

This is our first post about the [The Debugging
Book](https://www.debuggingbook.org/html/Intro_Debugging.html)! The goal of
this post is to introduce different debugging methods and utilize these methods
within our [Chasten](https://github.com/AstuteSource/chasten) and
[Cellveyor](https://github.com/GatorEducator/cellveyor) tools.

## Summary

The [Introduction to
Debugging](https://www.debuggingbook.org/html/Intro_Debugging.html) chapter
explores the topic of debugging through the example of fixing issues in a
Python program that removes HTML tags. It explores common debugging challenges
and introduces a systematic approach using the scientific method. A specific
example involves testing a hypothesis about quote handling and using assertions
for confirmation. The importance of a clear diagnosis and post-fix steps like
testing, adding assertions, committing changes, and closing bug reports is
emphasized. Overall, it provides insights into effective debugging strategies
while highlighting the significance of thorough documentation and clear
thinking during the debugging process.

The chapter also introduces a systematic debugging strategy based on the
scientific method. It emphasizes the importance of understanding the code,
fixing the problem instead of symptoms, and proceeding systematically. The
scientific method is applied to debugging, involving formulating hypotheses,
making predictions, testing hypotheses through experiments, and refining
hypotheses based on observations.

The chapter provides a specific example where a hypothesis about the removal of
double quotes from tagged input is tested and confirmed using the `assert`
statement. The debugging process involves identifying defects, faults, and
failures, and tracing the cause-effect chain to locate and fix the underlying
issues. The passage concludes by highlighting the challenges of debugging,
including the complexity of program states and the lack of specifications:

```python
# Initial code segment with the hypothesis
elif c == '"' or c == "'" and tag:
    assert False  # <=== Just added
    quote = not quote
```

To test the hypothesis, the author introduces an `assert` statement to check
whether the condition is faulty. They run the program with an input that
triggers this condition:

```python
result = remove_html_markup_with_quote_assert('"foo"')
```

The correct fix involves adding parentheses to ensure the corrected condition:

```python
elif (c == '"' or c == "'") and tag:
    quote = not quote
```

The incorrect condition fails to handle single and double quotes correctly. The
corrected condition ensures that the code inside the block is executed only
when either a single or double quote is encountered and the `tag` variable is
true.

After fixing the code, the author suggests post-fix activities, including
checking for further occurrences of the defect, validating tests, adding
assertions for future correctness checks, committing the fix to the code
repository, and closing the bug report. These activities ensure the long-term
health and correctness of a software application.

## Reflection

After reading and interpreting this article, we as software engineers can learn
more about debugging. We learn about how simple debugging is and how we can
make it legible with Python. Debugging means to simultaneously find and fix
problems within our code. The author wants developers to approach debugging by
using the scientific method.

This chapter uses a Python function to concretely explore the debugging
process. In the provided function there is a bug that causes it to not work
properly. The article shows in a step-by-step fashion what is wrong and
explains how to debug this function. The message being conveyed in this article
is to simply use a systematic and methodical approach when going about
debugging. Of course, this is often easier said than done!

## Action Items

The cause-and-effect chain can be helpful to keep in mind when writing test
cases for our code. Having a deeper understanding of the steps in the
cause-and-effect chain can allow us to write better test cases to debug our
program. Knowing that the chain starts with a human action that results in an
error which then results in errors in the code may help us figure out how to
debug a section of the program or an input that causes an error.

Using the idea of the scientific method in this chapter can also be beneficial
to look at bugs that are within the program or function. Taking the approach of
the scientific method and creating a hypothesis as to what might be causing the
error that the program or function is producing is a good first step in
diagnosing the bug. Predicting what may happen when you modify a section or
piece of code and checking it to see if the output is what you predicted it to
be will help us debug a program or function. Overall, this chapter gives key
insights into the best methodology to use when debugging a function or program.
We can use it to fix bugs in our own programs!

<!-- Include the license statement for the online book -->
{{< include /_debuggingbook-reference.qmd >}}

<!-- Include reference back to the listing of blog posts -->
{{< include /_back-blog.qmd >}}
